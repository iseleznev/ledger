<?xml version="1.0" encoding="UTF-8" ?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd"
                   logicalFilePath="20250825_002_create_function_uuid7generate">
    <changeSet id="20250825_002_create_function_uuid7generate" author="Igor Seleznyov">
        <sql>
            CREATE
            OR REPLACE FUNCTION generate_uuid_v7()
RETURNS UUID
LANGUAGE plpgsql
AS $$
DECLARE
    -- Unix timestamp в миллисекундах (48 бит)
            unix_ts_ms BIGINT;

    -- Компоненты UUID
    time_high
            INTEGER;
    time_mid
            INTEGER;
    time_low
            INTEGER;

    -- Случайные компоненты
    clock_seq_and_reserved
            INTEGER;
    clock_seq_low
            INTEGER;
    node_high
            INTEGER;
    node_low
            BIGINT;

    -- Результирующий UUID как строка
    uuid_str
            TEXT;
            BEGIN
    -- Получаем текущее время в миллисекундах с Unix epoch
    unix_ts_ms
            := EXTRACT(epoch FROM clock_timestamp()) * 1000;

    -- Разбиваем timestamp на компоненты
    -- Старшие 32 бита временной метки
    time_high
            := (unix_ts_ms >> 16)::INTEGER;

    -- Средние 16 бит временной метки
    time_mid
            := (unix_ts_ms & x'FFFF'::BIGINT)::INTEGER;

    -- Младшие 12 бит - случайные + 4 бита версии (0111 для v7)
    time_low
            := ((random() * 4095)::INTEGER) | (7
            <
            <
            12);

    -- Clock sequence (14 бит) + variant (10xx для RFC 4122)
    -- Генерируем 14 случайных бит и устанавливаем variant в 10xx
    clock_seq_and_reserved
            := ((random() * 16383)::INTEGER) | (2
            <
            <
            14);

    -- Еще 8 бит случайных данных
    clock_seq_low
            := (random() * 255)::INTEGER;

    -- Последние 48 бит - случайные данные (node)
    node_high
            := (random() * 65535)::INTEGER;
    node_low
            := (random() * 4294967295)::BIGINT;

    -- Формируем UUID строку в стандартном формате
    uuid_str
            := format(
        '%08X-%04X-%04X-%04X-%04X%08X',
        time_high,
        time_mid,
        time_low,
        clock_seq_and_reserved,
        node_high,
        node_low
    );

    -- Возвращаем как тип UUID
            RETURN uuid_str::UUID;
            END;
$$;

-- Вспомогательная функция для генерации UUID v7 с более точной временной меткой
-- Включает дополнительную случайность для предотвращения коллизий
CREATE
            OR REPLACE FUNCTION generate_uuid_v7_precise()
RETURNS UUID
LANGUAGE plpgsql
AS $$
DECLARE
            unix_ts_ms BIGINT;
    random_a
            INTEGER;  -- 12-bit random
    random_b
            BIGINT;   -- 62-bit random

    -- Байты для построения UUID
    byte_array
            BYTEA;
            BEGIN
    -- Получаем время с максимальной доступной точностью
    unix_ts_ms
            := EXTRACT(epoch FROM clock_timestamp()) * 1000;

    -- Генерируем случайные компоненты
    random_a
            := (random() * 4095)::INTEGER;  -- 12 бит
    random_b
            := (random() * 4611686018427387903::BIGINT)::BIGINT;  -- 62 бита

    -- Собираем байты UUID
    byte_array
            :=
        -- Timestamp (48 бит)
        decode(lpad(to_hex(unix_ts_ms), 12, '0'), 'hex') ||
        -- Version + random_a (16 бит): версия 7 (0111) + 12 случайных бит
        decode(lpad(to_hex((7
            <
            <
            12) | random_a), 4, '0'), 'hex') ||
        -- Variant + random_b (64 бита): variant (10) + 62 случайных бита
        decode(lpad(to_hex((2::BIGINT
            <
            <
            62) | random_b), 16, '0'), 'hex');

    -- Преобразуем в стандартный формат UUID
            RETURN encode(byte_array, 'hex')::UUID;
            END;
$$;
        </sql>
        <rollback>
            DROP FUNCTION IF EXISTS generate_uuid_v7;
            DROP FUNCTION IF EXISTS generate_uuid_v7_precise;
        </rollback>
    </changeSet>


</databaseChangeLog>