package org.seleznyov.iyu.kfin.ledgerservice.core.constants;

import java.lang.foreign.ValueLayout;

import static org.seleznyov.iyu.kfin.ledgerservice.core.constants.CommonConstants.CPU_CACHE_LINE_SIZE;

public interface StateOffsetConstants {

    long INDEX_MAGIC_PREFIX = 0x4C44475249474458L; // "LDGRINDX"
    long STATE_MAGIC_PREFIX = 0x4C44475253544154L; // "LDGR01"
    ValueLayout.OfLong STATE_MAGIC_PREFIX_TYPE = ValueLayout.JAVA_LONG;

    int STATE_FILE_HEADER_SIZE = 32;

    int INDEX_MAGIC_PREFIX_OFFSET = 0;
    ValueLayout.OfLong INDEX_MAGIC_PREFIX_TYPE = ValueLayout.JAVA_LONG;
    int INDEX_FILE_HEADER_VERSION_OFFSET = (int) (INDEX_MAGIC_PREFIX_OFFSET + INDEX_MAGIC_PREFIX_TYPE.byteSize());
    ValueLayout.OfInt INDEX_FILE_HEADER_VERSION_TYPE = ValueLayout.JAVA_INT;
    int INDEX_FILE_HEADER_PARTITION_NUMBER_OFFSET = (int) (INDEX_FILE_HEADER_VERSION_OFFSET + INDEX_FILE_HEADER_VERSION_TYPE.byteSize());
    ValueLayout.OfInt INDEX_FILE_HEADER_PARTITION_NUMBER_TYPE = ValueLayout.JAVA_INT;
    int INDEX_FILE_HEADER_CAPACITY_OFFSET = (int) (INDEX_FILE_HEADER_PARTITION_NUMBER_OFFSET + INDEX_FILE_HEADER_PARTITION_NUMBER_TYPE.byteSize());
    ValueLayout.OfInt INDEX_FILE_HEADER_CAPACITY_TYPE = ValueLayout.JAVA_INT;
    int INDEX_FILE_HEADER_COUNT_OFFSET = (int) (INDEX_FILE_HEADER_CAPACITY_OFFSET + INDEX_FILE_HEADER_CAPACITY_TYPE.byteSize());
    ValueLayout.OfInt INDEX_FILE_HEADER_COUNT_TYPE = ValueLayout.JAVA_INT;
    int INDEX_FILE_HEADER_LOAD_FACTOR_OFFSET = (int) (INDEX_FILE_HEADER_COUNT_OFFSET + INDEX_FILE_HEADER_COUNT_TYPE.byteSize());
    ValueLayout.OfFloat INDEX_FILE_HEADER_LOAD_FACTOR_TYPE = ValueLayout.JAVA_FLOAT;
    int INDEX_FILE_HEADER_CURRENT_ORDINAL_OFFSET = (int) (INDEX_FILE_HEADER_LOAD_FACTOR_OFFSET + INDEX_FILE_HEADER_LOAD_FACTOR_TYPE.byteSize());
    ValueLayout.OfLong INDEX_FILE_HEADER_CURRENT_ORDINAL_TYPE = ValueLayout.JAVA_LONG;
    int INDEX_FILE_HEADER_COMMITTED_ORDINAL_OFFSET = (int) (INDEX_FILE_HEADER_CURRENT_ORDINAL_OFFSET + INDEX_FILE_HEADER_CURRENT_ORDINAL_TYPE.byteSize());
    ValueLayout.OfLong INDEX_FILE_HEADER_COMMITTED_ORDINAL_TYPE = ValueLayout.JAVA_LONG;
    int INDEX_FILE_HEADER_RAW_SIZE = (int) (INDEX_FILE_HEADER_COMMITTED_ORDINAL_OFFSET + INDEX_FILE_HEADER_COMMITTED_ORDINAL_TYPE.byteSize());
    int INDEX_FILE_HEADER_SIZE = (INDEX_FILE_HEADER_RAW_SIZE + CPU_CACHE_LINE_SIZE - 1) & -CPU_CACHE_LINE_SIZE;

    // Index entry offsets
    int INDEX_ACCOUNT_MSB_OFFSET = 0;
    ValueLayout.OfLong INDEX_ACCOUNT_SB_TYPE = ValueLayout.JAVA_LONG;
    int INDEX_ACCOUNT_LSB_OFFSET = (int) (INDEX_ACCOUNT_MSB_OFFSET + INDEX_ACCOUNT_SB_TYPE.byteSize());
    int INDEX_FILE_OFFSET_OFFSET = (int) (INDEX_ACCOUNT_LSB_OFFSET + INDEX_ACCOUNT_SB_TYPE.byteSize());
    ValueLayout.OfLong INDEX_FILE_OFFSET_TYPE = ValueLayout.JAVA_LONG;
    int INDEX_PSL_OFFSET = (int) (INDEX_FILE_OFFSET_OFFSET + INDEX_FILE_OFFSET_TYPE.byteSize());
    ValueLayout.OfLong INDEX_PSL_TYPE = ValueLayout.JAVA_LONG;
    int INDEX_LAST_UPDATED_OFFSET = (int) (INDEX_PSL_OFFSET + INDEX_PSL_TYPE.byteSize());
    ValueLayout.OfLong INDEX_LAST_UPDATED_TYPE = ValueLayout.JAVA_LONG;
    int INDEX_RAW_SIZE = (int) (INDEX_LAST_UPDATED_OFFSET + INDEX_LAST_UPDATED_TYPE.byteSize());
    int INDEX_SIZE = (INDEX_RAW_SIZE + CPU_CACHE_LINE_SIZE - 1) & -CPU_CACHE_LINE_SIZE;

    // Data record offsets
//    int STATE_ACCOUNT_MSB_OFFSET = 0;
//    int STATE_ACCOUNT_LSB_OFFSET = 8;
//    int STATE_BALANCE_OFFSET = 16;
//    int STATE_ORDINAL_OFFSET = 24;
//    int STATE_STAGED_OFFSET = 32;
    int STATE_TIMESTAMP_OFFSET = AccountPartitionHashTableConstants.HASH_TABLE_ENTRY_SIZE;
    ValueLayout.OfLong STATE_TIMESTAMP_TYPE = ValueLayout.JAVA_LONG;
    int STATE_FLAGS_OFFSET = (int) (STATE_TIMESTAMP_OFFSET + STATE_TIMESTAMP_TYPE.byteSize());
    ValueLayout.OfLong STATE_FLAGS_TYPE = ValueLayout.JAVA_LONG;
    int STATE_CHECKSUM_OFFSET = (int) (STATE_FLAGS_OFFSET + STATE_FLAGS_TYPE.byteSize());
    ValueLayout.OfInt STATE_CHECKSUM_TYPE = ValueLayout.JAVA_INT;
    int STATE_RAW_SIZE = (int) (STATE_CHECKSUM_OFFSET + STATE_CHECKSUM_TYPE.byteSize());
    int STATE_SIZE = (STATE_RAW_SIZE + CPU_CACHE_LINE_SIZE - 1) & -CPU_CACHE_LINE_SIZE;
}
