package org.seleznyov.iyu.kfin.ledgerservice.core.constants;

import java.lang.foreign.ValueLayout;

import static org.seleznyov.iyu.kfin.ledgerservice.core.constants.CommonConstants.CPU_CACHE_LINE_SIZE;

public interface AccountPartitionHashTableConstants {

    short EMPTY = 0;
    short OCCUPIED = 1;
    short DELETED = 3;

    short RATE_COLD_ACCOUNT = 0;
    short RATE_WARM_ACCOUNT = 1;
    short RATE_HOT_ACCOUNT = 3;

    int HASH_TABLE_ACCOUNT_ID_MSB_OFFSET = 0;
    ValueLayout.OfLong HASH_TABLE_ACCOUNT_ID_TYPE = ValueLayout.JAVA_LONG;

    int HASH_TABLE_ACCOUNT_ID_LSB_OFFSET = (int) (HASH_TABLE_ACCOUNT_ID_MSB_OFFSET + HASH_TABLE_ACCOUNT_ID_TYPE.byteSize());

    int HASH_TABLE_ACCOUNT_BALANCE_OFFSET = (int) (HASH_TABLE_ACCOUNT_ID_LSB_OFFSET + HASH_TABLE_ACCOUNT_ID_TYPE.byteSize());
    ValueLayout.OfLong HASH_TABLE_ACCOUNT_BALANCE_TYPE = ValueLayout.JAVA_LONG;

    int HASH_TABLE_ACCOUNT_ORDINAL_OFFSET = (int) (HASH_TABLE_ACCOUNT_BALANCE_OFFSET + HASH_TABLE_ACCOUNT_BALANCE_TYPE.byteSize());
    ValueLayout.OfLong HASH_TABLE_ACCOUNT_ORDINAL_TYPE = ValueLayout.JAVA_LONG;

    int HASH_TABLE_ACCOUNT_ENTRIES_COUNT_OFFSET = (int) (HASH_TABLE_ACCOUNT_ORDINAL_OFFSET + HASH_TABLE_ACCOUNT_ORDINAL_TYPE.byteSize());
    ValueLayout.OfLong HASH_TABLE_ACCOUNT_ENTRIES_COUNT_TYPE = ValueLayout.JAVA_LONG;

    int HASH_TABLE_STATE_OFFSET = (int) (HASH_TABLE_ACCOUNT_ENTRIES_COUNT_OFFSET + HASH_TABLE_ACCOUNT_ENTRIES_COUNT_TYPE.byteSize());
    ValueLayout.OfShort HASH_TABLE_STATE_TYPE = ValueLayout.JAVA_SHORT;

    int HASH_TABLE_ACCOUNT_RATE_OFFSET = (int) (HASH_TABLE_STATE_OFFSET + HASH_TABLE_STATE_TYPE.byteSize());
    ValueLayout.OfShort HASH_TABLE_ACCOUNT_RATE_TYPE = ValueLayout.JAVA_SHORT;

    int HASH_TABLE_PSL_OFFSET = (int) (HASH_TABLE_ACCOUNT_RATE_OFFSET + HASH_TABLE_ACCOUNT_RATE_TYPE.byteSize());
    ValueLayout.OfInt HASH_TABLE_PSL_TYPE = ValueLayout.JAVA_INT;

    int HASH_TABLE_ORDINAL_OFFSET = (int) (HASH_TABLE_PSL_OFFSET + HASH_TABLE_PSL_TYPE.byteSize());
    ValueLayout.OfLong HASH_TABLE_ORDINAL_TYPE = ValueLayout.JAVA_LONG;

    int HASH_TABLE_ACCOUNT_STAGED_AMOUNT_OFFSET = (int) (HASH_TABLE_ORDINAL_OFFSET + HASH_TABLE_ORDINAL_TYPE.byteSize());
    ValueLayout.OfLong HASH_TABLE_ACCOUNT_STAGED_AMOUNT_TYPE = ValueLayout.JAVA_LONG;

    int HASH_TABLE_ACCOUNT_STAGED_AMOUNT_BOUND_OFFSET = (int) (HASH_TABLE_ACCOUNT_STAGED_AMOUNT_OFFSET + HASH_TABLE_ACCOUNT_STAGED_AMOUNT_TYPE.byteSize());
    ValueLayout.OfLong HASH_TABLE_ACCOUNT_STAGED_AMOUNT_BOUND_TYPE = ValueLayout.JAVA_LONG;

    int HASH_TABLE_ENTRY_RAW_SIZE = (int) (HASH_TABLE_ACCOUNT_STAGED_AMOUNT_BOUND_OFFSET + HASH_TABLE_ACCOUNT_STAGED_AMOUNT_BOUND_TYPE.byteSize());

    int HASH_TABLE_ENTRY_SIZE = (HASH_TABLE_ENTRY_RAW_SIZE + CPU_CACHE_LINE_SIZE - 1) & -CPU_CACHE_LINE_SIZE;

    // Robin Hood параметры
//    int MAX_PSL = 16; // Максимальный Probe Sequence Length
    double HASH_TABLE_LOAD_FACTOR = 0.85; // Агрессивный для экономии памяти
    long HASH_TABLE_PREALLOC_CHUNK = 1_048_576; // 1M элементов
}
